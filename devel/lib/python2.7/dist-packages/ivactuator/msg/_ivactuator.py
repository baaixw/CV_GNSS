# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ivactuator/ivactuator.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ivactuator(genpy.Message):
  _md5sum = "526428371bea2f291a9985ee99cde163"
  _type = "ivactuator/ivactuator"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 EmBrakerStatus
uint8 EpsStatus
uint8 TorqueStatus
uint8 DecStatus   
uint8 SysStatus
uint8 ucGearCtrlStatus  
uint8 BrakePedalStatus
uint8 CruiseStatus
uint8 ucGearPosition
int16 uispeed
int16 uisteerangle
int16 BatteryVoltage
int16 CrossAccelerated
int16 LengthwayAccelerated
int16 SwingAngularVelocity


"""
  __slots__ = ['EmBrakerStatus','EpsStatus','TorqueStatus','DecStatus','SysStatus','ucGearCtrlStatus','BrakePedalStatus','CruiseStatus','ucGearPosition','uispeed','uisteerangle','BatteryVoltage','CrossAccelerated','LengthwayAccelerated','SwingAngularVelocity']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       EmBrakerStatus,EpsStatus,TorqueStatus,DecStatus,SysStatus,ucGearCtrlStatus,BrakePedalStatus,CruiseStatus,ucGearPosition,uispeed,uisteerangle,BatteryVoltage,CrossAccelerated,LengthwayAccelerated,SwingAngularVelocity

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ivactuator, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.EmBrakerStatus is None:
        self.EmBrakerStatus = 0
      if self.EpsStatus is None:
        self.EpsStatus = 0
      if self.TorqueStatus is None:
        self.TorqueStatus = 0
      if self.DecStatus is None:
        self.DecStatus = 0
      if self.SysStatus is None:
        self.SysStatus = 0
      if self.ucGearCtrlStatus is None:
        self.ucGearCtrlStatus = 0
      if self.BrakePedalStatus is None:
        self.BrakePedalStatus = 0
      if self.CruiseStatus is None:
        self.CruiseStatus = 0
      if self.ucGearPosition is None:
        self.ucGearPosition = 0
      if self.uispeed is None:
        self.uispeed = 0
      if self.uisteerangle is None:
        self.uisteerangle = 0
      if self.BatteryVoltage is None:
        self.BatteryVoltage = 0
      if self.CrossAccelerated is None:
        self.CrossAccelerated = 0
      if self.LengthwayAccelerated is None:
        self.LengthwayAccelerated = 0
      if self.SwingAngularVelocity is None:
        self.SwingAngularVelocity = 0
    else:
      self.EmBrakerStatus = 0
      self.EpsStatus = 0
      self.TorqueStatus = 0
      self.DecStatus = 0
      self.SysStatus = 0
      self.ucGearCtrlStatus = 0
      self.BrakePedalStatus = 0
      self.CruiseStatus = 0
      self.ucGearPosition = 0
      self.uispeed = 0
      self.uisteerangle = 0
      self.BatteryVoltage = 0
      self.CrossAccelerated = 0
      self.LengthwayAccelerated = 0
      self.SwingAngularVelocity = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_9B6h.pack(_x.EmBrakerStatus, _x.EpsStatus, _x.TorqueStatus, _x.DecStatus, _x.SysStatus, _x.ucGearCtrlStatus, _x.BrakePedalStatus, _x.CruiseStatus, _x.ucGearPosition, _x.uispeed, _x.uisteerangle, _x.BatteryVoltage, _x.CrossAccelerated, _x.LengthwayAccelerated, _x.SwingAngularVelocity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.EmBrakerStatus, _x.EpsStatus, _x.TorqueStatus, _x.DecStatus, _x.SysStatus, _x.ucGearCtrlStatus, _x.BrakePedalStatus, _x.CruiseStatus, _x.ucGearPosition, _x.uispeed, _x.uisteerangle, _x.BatteryVoltage, _x.CrossAccelerated, _x.LengthwayAccelerated, _x.SwingAngularVelocity,) = _struct_9B6h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_9B6h.pack(_x.EmBrakerStatus, _x.EpsStatus, _x.TorqueStatus, _x.DecStatus, _x.SysStatus, _x.ucGearCtrlStatus, _x.BrakePedalStatus, _x.CruiseStatus, _x.ucGearPosition, _x.uispeed, _x.uisteerangle, _x.BatteryVoltage, _x.CrossAccelerated, _x.LengthwayAccelerated, _x.SwingAngularVelocity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.EmBrakerStatus, _x.EpsStatus, _x.TorqueStatus, _x.DecStatus, _x.SysStatus, _x.ucGearCtrlStatus, _x.BrakePedalStatus, _x.CruiseStatus, _x.ucGearPosition, _x.uispeed, _x.uisteerangle, _x.BatteryVoltage, _x.CrossAccelerated, _x.LengthwayAccelerated, _x.SwingAngularVelocity,) = _struct_9B6h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_9B6h = struct.Struct("<9B6h")
